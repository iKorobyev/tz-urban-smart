{"version":3,"sources":["types/user.ts","store/action-creators/user.ts","components/Form.tsx","Profile.tsx","hooks/useTypedSelector.ts","App.tsx","store/reducers/fetchData.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","fetchUser","dispatch","type","FETCH_USER","FETCH_USER_SUCCESS","payload","login","password","e","FETCH_USER_ERROR","Form","user","loading","error","useDispatch","useState","firstInput","setFirstInput","secondInput","setSecondInput","history","useHistory","useEffect","className","onSubmit","push","placeholder","onChange","target","value","disabled","Profile","useTypedSelector","useSelector","App","state","exact","path","initState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"uJAWYA,E,yDAAAA,K,wBAAAA,E,wCAAAA,E,qCAAAA,M,KCRL,IAAMC,EAAY,WACvB,OAAO,SAACC,GACN,IACEA,EAAS,CAACC,KAAMH,EAAgBI,aAChCF,EAAS,CAACC,KAAMH,EAAgBK,mBAAoBC,QAAS,CAAEC,MAAO,cAAeC,SAAU,YAC/F,MAAOC,GACPP,EAAS,CAACC,KAAMH,EAAgBU,iBAAkBJ,QAAS,uP,cC2ClDK,EAxCa,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MACrCZ,EAAWa,cACjB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAUC,cAUhB,OAJAC,qBAAU,WACRrB,EAASD,OACR,IAECY,EACK,6CAELC,EACK,0CAAaA,KAIpB,qBAAKU,UAAU,gDAAf,SACE,uBAAMC,SAjBW,WACnBJ,EAAQK,KAAK,aAgBmBF,UAAU,yBAAxC,UACE,oBAAIA,UAAU,iBAAd,mBACA,uBAAOG,YAAY,4EAAgBH,UAAU,4BACtCI,SAAU,SAAAnB,GAAC,OAAIS,EAAcT,EAAEoB,OAAOC,QACtC3B,KAAK,SACZ,uBAAOwB,YAAY,kFAAiBH,UAAU,4BACvCI,SAAU,SAAAnB,GAAC,OAAIW,EAAeX,EAAEoB,OAAOC,QACvC3B,KAAK,aACZ,wBAAQqB,UAAU,qCAAqCrB,KAAK,SACpD4B,WAAad,IAAeL,EAAKL,OAASY,IAAgBP,EAAKJ,UADvE,kDC3BOwB,EATmB,SAAC,GAAa,IAAXpB,EAAU,EAAVA,KAEnC,OACE,qBAAKY,UAAU,gDAAf,SACE,6BAAKZ,EAAKL,WCPH0B,EAAoDC,ICwBlDC,EApBH,WACV,MAA+BF,GAAiB,SAAAG,GAAK,OAAIA,EAAMxB,QAAxDA,EAAP,EAAOA,KAAME,EAAb,EAAaA,MAAOD,EAApB,EAAoBA,QACdX,EAAWa,cAMjB,OAJAQ,qBAAU,WACRrB,EAASD,OACR,IAGD,gCACE,cAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAM1B,KAAMA,EAAME,MAAOA,EAAOD,QAASA,MAE3C,cAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,CAAS1B,KAAMA,U,QCpBjB2B,EAAwB,CAC5B3B,KAAM,GACNC,SAAS,EACTC,MAAO,MCFI0B,EAAcC,YAAgB,CACzC7B,KDIyB,WAAwD,IAAvDwB,EAAsD,uDAA9CG,EAAWG,EAAmC,uCAChF,OAAQA,EAAOvC,MACb,KAAKH,EAAgBI,WACnB,MAAO,CAAES,SAAS,EAAMC,MAAO,KAAMF,KAAM,IAC7C,KAAKZ,EAAgBK,mBACnB,MAAO,CAAEQ,SAAS,EAAOC,MAAO,KAAMF,KAAM8B,EAAOpC,SACrD,KAAKN,EAAgBU,iBACnB,MAAO,CAAEG,SAAS,EAAOC,MAAO4B,EAAOpC,QAASM,KAAM,IACxD,QACE,OAAOwB,M,QEZAO,EAAQC,YAAYJ,EAAaK,YAAgBC,M,QCG9DC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.d9616bec.chunk.js","sourcesContent":["export interface IUser {\r\n  login?: string;\r\n  password?: string;\r\n}\r\n\r\nexport interface IInitState {\r\n  user: IUser;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\n\r\nexport enum UserActionTypes {\r\n  FETCH_USER = 'FETCH_USER',\r\n  FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS',\r\n  FETCH_USER_ERROR = 'FETCH_USER_ERROR'\r\n}\r\n\r\nexport interface FetchUserAction {\r\n  type: UserActionTypes.FETCH_USER\r\n}\r\n\r\nexport interface FetchUserSuccessAction {\r\n  type: UserActionTypes.FETCH_USER_SUCCESS;\r\n  payload: {\r\n    login: string,\r\n    password: string\r\n  }\r\n}\r\n\r\nexport interface FetchUserErrorAction {\r\n  type: UserActionTypes.FETCH_USER_ERROR;\r\n  payload: string\r\n}\r\n\r\nexport type UserAction = FetchUserAction | FetchUserSuccessAction | FetchUserErrorAction","import {Dispatch} from \"redux\";\r\nimport {UserAction, UserActionTypes} from \"../../types/user\";\r\n\r\nexport const fetchUser = () => {\r\n  return (dispatch: Dispatch<UserAction>) => {\r\n    try {\r\n      dispatch({type: UserActionTypes.FETCH_USER})\r\n      dispatch({type: UserActionTypes.FETCH_USER_SUCCESS, payload: { login: 'developer21', password: '123456' }})\r\n    } catch (e) {\r\n      dispatch({type: UserActionTypes.FETCH_USER_ERROR, payload: 'Произошла ошибка при загрузке пользователей!'})\r\n    }\r\n  }\r\n}","import React, {FC, useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchUser} from \"../store/action-creators/user\";\r\nimport {useHistory} from \"react-router\";\r\nimport {IUser} from \"../types/user\";\r\n\r\ninterface FormProps {\r\n  user: IUser;\r\n  loading: boolean;\r\n  error: string | null\r\n}\r\n\r\nconst Form: FC<FormProps> = ({user, loading, error}) => {\r\n  const dispatch = useDispatch()\r\n  const [firstInput, setFirstInput] = useState('')\r\n  const [secondInput, setSecondInput] = useState('')\r\n  const history = useHistory()\r\n\r\n  const handleSubmit = () => {\r\n    history.push('/profile')\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUser())\r\n  }, [])\r\n\r\n  if (loading) {\r\n    return <h1>Loading....</h1>\r\n  }\r\n  if (error) {\r\n    return <h1>Error: ${error}</h1>\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex min-h-screen justify-center items-center\">\r\n      <form onSubmit={handleSubmit} className=\"flex flex-col gap-y-20\">\r\n        <h2 className=\"text-[#191919]\">Hello</h2>\r\n        <input placeholder=\"Введите логин\" className=\"border-1 border-[#191919]\"\r\n               onChange={e => setFirstInput(e.target.value)}\r\n               type=\"text\"/>\r\n        <input placeholder=\"Введите пароль\" className=\"border-1 border-[#191919]\"\r\n               onChange={e => setSecondInput(e.target.value)}\r\n               type=\"password\"/>\r\n        <button className=\"disabled:bg-[#ff0000] bg-[#00FF00]\" type=\"submit\"\r\n                disabled={(!(firstInput === user.login && secondInput === user.password))}>\r\n          Войти\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;","import React, {FC} from 'react'\r\nimport {IUser} from \"./types/user\";\r\n\r\ninterface ProfileProps {\r\n  user: IUser\r\n}\r\n\r\nconst Profile: FC<ProfileProps> = ({ user}) => {\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen\">\r\n      <h1>{user.login}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/reducers\";\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import React, {useEffect} from 'react';\nimport Form from \"./components/Form\";\nimport {Route} from \"react-router\";\nimport Profile from \"./Profile\";\nimport {useTypedSelector} from \"./hooks/useTypedSelector\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchUser} from \"./store/action-creators/user\";\n\nconst App = () => {\n  const {user, error, loading} = useTypedSelector(state => state.user)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchUser())\n  }, [])\n\n  return (\n    <div>\n      <Route exact path=\"/\">\n        <Form user={user} error={error} loading={loading} />\n      </Route>\n      <Route exact path=\"/profile\">\n        <Profile user={user}/>\n      </Route>\n    </div>\n  );\n};\n\nexport default App;","import {IInitState, UserAction, UserActionTypes} from '../../types/user'\r\n\r\nconst initState: IInitState = {\r\n  user: {},\r\n  loading: false,\r\n  error: null\r\n}\r\n\r\nexport const userReducer = (state = initState, action: UserAction): IInitState => {\r\n  switch (action.type) {\r\n    case UserActionTypes.FETCH_USER:\r\n      return { loading: true, error: null, user: {} }\r\n    case UserActionTypes.FETCH_USER_SUCCESS:\r\n      return { loading: false, error: null, user: action.payload }\r\n    case UserActionTypes.FETCH_USER_ERROR:\r\n      return { loading: false, error: action.payload, user: {} }\r\n    default:\r\n      return state\r\n  }\r\n}","import {combineReducers} from \"redux\";\r\nimport {userReducer} from \"./fetchData\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  user: userReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import {applyMiddleware, createStore} from \"redux\";\r\nimport {rootReducer} from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}